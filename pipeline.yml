---
jobs:
- name: deploy-ops-concourse-staging
  serial: true
  plan:
  - aggregate:
    - get: concourse-config
      trigger: true
    - get: common
      resource: common-ops-staging
      trigger: true
    - get: terraform-state
      resource: state-file-tooling
      trigger: true
    - get: pipeline-tasks
    - get: concourse-stemcell
      trigger: true
    - get: concourse-release
      trigger: true
    - get: garden-runc-release
      trigger: false
    - get: master-bosh-root-cert
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - task: concourse-manifest
    config: &manifest-config
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: concourse-config
      - name: terraform-yaml
      - name: common
      run:
        path: concourse-config/generate.sh
        args: ["concourse-config/concourse-staging.yml", "common/secrets.yml", "terraform-yaml/state.yml", "concourse-manifest/manifest.yml"]
      outputs:
      - name: concourse-manifest
  - put: ops-concourse-staging-deployment
    params: &deploy-params
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: concourse-manifest/manifest.yml
      releases:
      - concourse-release/*.tgz
      - garden-runc-release/*.tgz
      stemcells:
      - concourse-stemcell/*.tgz
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Ops Concourse on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Ops Concourse on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-ops-concourse-production
  serial: true
  plan:
  - aggregate:
    - get: concourse-config
      passed: [deploy-ops-concourse-staging]
      trigger: true
    - get: terraform-state
      resource: state-file-tooling
      passed: [deploy-ops-concourse-staging]
      trigger: true
    - get: pipeline-tasks
    - get: common
      resource: common-ops-production
      trigger: true
    - get: concourse-stemcell
      trigger: true
      passed: [deploy-ops-concourse-staging]
    - get: concourse-release
      trigger: true
      passed: [deploy-ops-concourse-staging]
    - get: garden-runc-release
      trigger: false
      passed: [deploy-ops-concourse-staging]
    - get: master-bosh-root-cert
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - task: concourse-manifest
    config:
      <<: *manifest-config
      run:
        path: concourse-config/generate.sh
        args: ["concourse-config/concourse-production.yml", "common/secrets.yml", "terraform-yaml/state.yml", "concourse-manifest/manifest.yml"]
  - put: ops-concourse-production-deployment
    params: *deploy-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Ops Concourse on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Ops Concourse on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-tenant-concourse-staging
  serial: true
  plan:
  - aggregate:
    - get: concourse-config
      trigger: true
    - get: terraform-state
      resource: state-file-staging
      trigger: true
    - get: pipeline-tasks
    - get: common
      resource: common-tenant-staging
      trigger: true
    - get: concourse-stemcell
      trigger: true
    - get: concourse-release
      trigger: true
    - get: garden-runc-release
      trigger: false
    - get: master-bosh-root-cert
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - task: concourse-manifest
    config:
      <<: *manifest-config
      run:
        path: concourse-config/generate.sh
        args: ["concourse-config/concourse-tenant.yml", "common/secrets.yml", "terraform-yaml/state.yml", "concourse-manifest/manifest.yml"]
  - put: tenant-concourse-staging-deployment
    params: *deploy-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Tenant Concourse on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Tenant Concourse on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-tenant-concourse-production
  serial: true
  plan:
  - aggregate:
    - get: concourse-config
      passed: [deploy-tenant-concourse-staging]
      trigger: true
    - get: terraform-state
      resource: state-file-production
      trigger: true
    - get: pipeline-tasks
    - get: common
      resource: common-tenant-production
      trigger: true
    - get: concourse-stemcell
      trigger: true
      passed: [deploy-tenant-concourse-staging]
    - get: concourse-release
      trigger: true
      passed: [deploy-tenant-concourse-staging]
    - get: garden-runc-release
      trigger: false
      passed: [deploy-tenant-concourse-staging]
    - get: master-bosh-root-cert
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - task: concourse-manifest
    config:
      <<: *manifest-config
      run:
        path: concourse-config/generate.sh
        args: ["concourse-config/concourse-tenant.yml", "common/secrets.yml", "terraform-yaml/state.yml", "concourse-manifest/manifest.yml"]
  - put: tenant-concourse-production-deployment
    params: *deploy-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Tenant Concourse on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Tenant Concourse on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

resources:
- name: concourse-config
  type: git
  source:
    uri: {{concourse-config-git-url}}
    branch: {{concourse-config-git-branch}}
    paths:
    - concourse.yml

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: common-ops-production
  type: cg-common
  source:
    bucket_name: {{ops-concourse-production-private-bucket}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: concourse-tooling-prod.yml
    secrets_passphrase: {{ops-concourse-production-private-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: common-ops-staging
  type: cg-common
  source:
    bucket_name: {{ops-concourse-staging-private-bucket}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: concourse-tooling-staging.yml
    secrets_passphrase: {{ops-concourse-staging-private-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: common-tenant-staging
  type: cg-common
  source:
    bucket_name: {{tenant-concourse-staging-private-bucket}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: concourse.yml
    secrets_passphrase: {{tenant-concourse-staging-private-passphrase}}
    bosh_cert: bosh.pem

- name: common-tenant-production
  type: cg-common
  source:
    bucket_name: {{tenant-concourse-production-private-bucket}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: concourse.yml
    secrets_passphrase: {{tenant-concourse-production-private-passphrase}}
    bosh_cert: bosh.pem

- name: master-bosh-root-cert
  type: s3
  source:
    bucket: {{ops-concourse-production-private-bucket}}
    region_name: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    versioned_file: master-bosh.crt

- name: concourse-stemcell
  type: s3
  source:
    bucket: {{stemcell-bucket}}
    region_name: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-ubuntu-trusty-go_agent.tgz

- name: concourse-release
  type: bosh-io-release
  source:
    repository: concourse/concourse

- name: garden-runc-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/garden-runc-release

- name: ops-concourse-production-deployment
  type: 18f-bosh-deployment
  source:
    target: {{ops-concourse-production-deployment-bosh-target}}
    username: {{ops-concourse-production-deployment-bosh-username}}
    password: {{ops-concourse-production-deployment-bosh-password}}
    deployment: {{ops-concourse-production-deployment-bosh-deployment}}

- name: ops-concourse-staging-deployment
  type: 18f-bosh-deployment
  source:
    target: {{ops-concourse-staging-deployment-bosh-target}}
    username: {{ops-concourse-staging-deployment-bosh-username}}
    password: {{ops-concourse-staging-deployment-bosh-password}}
    deployment: {{ops-concourse-staging-deployment-bosh-deployment}}

- name: tenant-concourse-staging-deployment
  type: 18f-bosh-deployment
  source:
    target: {{tenant-concourse-staging-deployment-bosh-target}}
    username: {{tenant-concourse-staging-deployment-bosh-username}}
    password: {{tenant-concourse-staging-deployment-bosh-password}}
    deployment: {{tenant-concourse-staging-deployment-bosh-deployment}}

- name: tenant-concourse-production-deployment
  type: 18f-bosh-deployment
  source:
    target: {{tenant-concourse-production-deployment-bosh-target}}
    username: {{tenant-concourse-production-deployment-bosh-username}}
    password: {{tenant-concourse-production-deployment-bosh-password}}
    deployment: {{tenant-concourse-production-deployment-bosh-deployment}}

- name: slack
  type: slack-notification-docker
  source:
    url: {{slack-webhook-url}}

- name: state-file-tooling
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-tooling}}
    versioned_file: {{tf-state-file-tooling}}
    region_name: {{aws-region}}

- name: state-file-staging
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-staging}}
    versioned_file: {{tf-state-file-staging}}
    region_name: {{aws-region}}

- name: state-file-production
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-production}}
    versioned_file: {{tf-state-file-production}}
    region_name: {{aws-region}}

resource_types:
- name: slack-notification-docker
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource
